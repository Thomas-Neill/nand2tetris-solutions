//Push(source=ARGUMENT, where=1)
@1
D=A
@ARG
A=D+M
D=M
@SP
M=M+1
A=M-1
M=D
//Pop(source=POINTER, where=1)
@SP
M=M-1
A=M
D=M
M=0
@4
M=D
//Push(source=CONSTANT, where=0)
@0
D=A
@SP
M=M+1
A=M-1
M=D
//Pop(source=THAT, where=0)
@SP
M=M-1
A=M
D=M
M=0
@THAT
A=M
M=D
//Push(source=CONSTANT, where=1)
@1
D=A
@SP
M=M+1
A=M-1
M=D
//Pop(source=THAT, where=1)
@SP
M=M-1
A=M
D=M
M=0
@THAT
A=M
A=A+1
M=D
//Push(source=ARGUMENT, where=0)
@0
D=A
@ARG
A=D+M
D=M
@SP
M=M+1
A=M-1
M=D
//Push(source=CONSTANT, where=2)
@2
D=A
@SP
M=M+1
A=M-1
M=D
//StackOperation(type=SUB)
@SP
M=M-1
A=M
D=M
M=0
A=A-1
M=M-D
//Pop(source=ARGUMENT, where=0)
@SP
M=M-1
A=M
D=M
M=0
@ARG
A=M
M=D
//Label(name=MAIN_LOOP_START)
(MAIN_LOOP_START)
//Push(source=ARGUMENT, where=0)
@0
D=A
@ARG
A=D+M
D=M
@SP
M=M+1
A=M-1
M=D
//IfGoto(label=COMPUTE_ELEMENT)
@SP
M=M-1
A=M
D=M
M=0
@COMPUTE_ELEMENT
D;JNE
//Goto(label=END_PROGRAM)
@END_PROGRAM
0;JMP
//Label(name=COMPUTE_ELEMENT)
(COMPUTE_ELEMENT)
//Push(source=THAT, where=0)
@0
D=A
@THAT
A=D+M
D=M
@SP
M=M+1
A=M-1
M=D
//Push(source=THAT, where=1)
@1
D=A
@THAT
A=D+M
D=M
@SP
M=M+1
A=M-1
M=D
//StackOperation(type=ADD)
@SP
M=M-1
A=M
D=M
M=0
A=A-1
M=D+M
//Pop(source=THAT, where=2)
@SP
M=M-1
A=M
D=M
M=0
@THAT
A=M
A=A+1
A=A+1
M=D
//Push(source=POINTER, where=1)
@4
D=M
@SP
M=M+1
A=M-1
M=D
//Push(source=CONSTANT, where=1)
@1
D=A
@SP
M=M+1
A=M-1
M=D
//StackOperation(type=ADD)
@SP
M=M-1
A=M
D=M
M=0
A=A-1
M=D+M
//Pop(source=POINTER, where=1)
@SP
M=M-1
A=M
D=M
M=0
@4
M=D
//Push(source=ARGUMENT, where=0)
@0
D=A
@ARG
A=D+M
D=M
@SP
M=M+1
A=M-1
M=D
//Push(source=CONSTANT, where=1)
@1
D=A
@SP
M=M+1
A=M-1
M=D
//StackOperation(type=SUB)
@SP
M=M-1
A=M
D=M
M=0
A=A-1
M=M-D
//Pop(source=ARGUMENT, where=0)
@SP
M=M-1
A=M
D=M
M=0
@ARG
A=M
M=D
//Goto(label=MAIN_LOOP_START)
@MAIN_LOOP_START
0;JMP
//Label(name=END_PROGRAM)
(END_PROGRAM)
