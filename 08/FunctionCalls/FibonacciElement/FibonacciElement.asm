@256
D=A
@SP
M=D//Call(name=Sys.init, args=0)
@RETURN0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(RETURN0)
//Function(name=Main.fibonacci, locals=0)
(Main.fibonacci)
//Push(source=ARGUMENT, where=0)
@0
D=A
@ARG
A=D+M
D=M
@SP
M=M+1
A=M-1
M=D
//Push(source=CONSTANT, where=2)
@2
D=A
@SP
M=M+1
A=M-1
M=D
//StackOperation(type=LT)
@SP
M=M-1
A=M
D=M
M=0
@R13
M=D
@SP
M=M-1
A=M
D=M
M=0
@R13
D=D-M
M=0
@LT0
D;JLT
@DONE0
0;JMP
(LT0)
@R13
M=-1
(DONE0)
@R13
D=M
@SP
M=M+1
A=M-1
M=D
//IfGoto(label=IF_TRUE)
@SP
M=M-1
A=M
D=M
M=0
@Main.fibonacci:IF_TRUE
D;JNE
//Goto(label=IF_FALSE)
@Main.fibonacci:IF_FALSE
0;JMP
//Label(name=IF_TRUE)
(Main.fibonacci:IF_TRUE)
//Push(source=ARGUMENT, where=0)
@0
D=A
@ARG
A=D+M
D=M
@SP
M=M+1
A=M-1
M=D
//Return@5d6f64b1
@5
D=A
@LCL
A=M-D
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@LCL
A=M-1
D=M
@THAT
M=D
@LCL
A=M-1
A=A-1
D=M
@THIS
M=D
@LCL
A=M-1
A=A-1
A=A-1
D=M
@ARG
M=D
@LCL
A=M-1
A=A-1
A=A-1
A=A-1
D=M
@LCL
M=D
@R13
A=M
0;JMP
//Label(name=IF_FALSE)
(Main.fibonacci:IF_FALSE)
//Push(source=ARGUMENT, where=0)
@0
D=A
@ARG
A=D+M
D=M
@SP
M=M+1
A=M-1
M=D
//Push(source=CONSTANT, where=2)
@2
D=A
@SP
M=M+1
A=M-1
M=D
//StackOperation(type=SUB)
@SP
M=M-1
A=M
D=M
M=0
A=A-1
M=M-D
//Call(name=Main.fibonacci, args=1)
@RETURN1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(RETURN1)
//Push(source=ARGUMENT, where=0)
@0
D=A
@ARG
A=D+M
D=M
@SP
M=M+1
A=M-1
M=D
//Push(source=CONSTANT, where=1)
@1
D=A
@SP
M=M+1
A=M-1
M=D
//StackOperation(type=SUB)
@SP
M=M-1
A=M
D=M
M=0
A=A-1
M=M-D
//Call(name=Main.fibonacci, args=1)
@RETURN2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(RETURN2)
//StackOperation(type=ADD)
@SP
M=M-1
A=M
D=M
M=0
A=A-1
M=D+M
//Return@32a1bec0
@5
D=A
@LCL
A=M-D
D=M
@R13
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@LCL
A=M-1
D=M
@THAT
M=D
@LCL
A=M-1
A=A-1
D=M
@THIS
M=D
@LCL
A=M-1
A=A-1
A=A-1
D=M
@ARG
M=D
@LCL
A=M-1
A=A-1
A=A-1
A=A-1
D=M
@LCL
M=D
@R13
A=M
0;JMP
//Function(name=Sys.init, locals=0)
(Sys.init)
//Push(source=CONSTANT, where=4)
@4
D=A
@SP
M=M+1
A=M-1
M=D
//Call(name=Main.fibonacci, args=1)
@RETURN0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(RETURN0)
//Label(name=WHILE)
(Sys.init:WHILE)
//Goto(label=WHILE)
@Sys.init:WHILE
0;JMP
