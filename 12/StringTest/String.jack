// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array internals;
    field int len;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      if(~(maxLength = 0)) {let internals = Array.new(maxLength);}
      else {let internals = -1;}
      let len = 0;
      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      if(~(internals = -1)) {
        do internals.dispose();
      }
      do Memory.deAlloc(this);
      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      return internals[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      let internals[j] = c;
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      do setCharAt(len,c);
      let len = len + 1;
      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      let len = len - 1;
      return;
    }

    function bool isDigit(char c) {
      return (47 < c) & (c < 58);
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
      var int n,ind;
      var bool negative;
      let n = 0;
      let negative = false;
      let ind = 0;
      if(~(len = 0)) {
        if(charAt(0) = 45) {
          let negative = true;
          let ind = 1;
        }
      }

      while(true) {
        if(ind = len) {
          if(negative) { return -n;}
          return n;
        }
        if(~String.isDigit(charAt(ind))) {
          if(negative) {
            return -n;
          }
          return n;
        }
        let n = (n*10) + charAt(ind) - 48;
        let ind = ind + 1;
      }
      return 0;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      var int valover10,valmod10,ind,srcInd;
      var String backwards;
      var bool neg_val;
      if(val = 0) {
        do setCharAt(0,"0");
        let len = 1;
        return;
      }
      let backwards = String.new(15); //better safe than sorry
      let neg_val = val < 0;
      let val = Math.abs(val);
      let ind = 0;
      while(val > 0) {
        let valover10 = val/10;
        let valmod10 = val - (10*valover10);
        do backwards.setCharAt(ind,valmod10+48);
        let ind = ind + 1;
        let val = valover10;
      }
      let len = ind;
      let srcInd = len - 1;
      let ind = 0;
      if(neg_val) {
        let ind = 1;
        let len = len + 1;
        do setCharAt(0,45);
      }
      while(ind < len) {
        do setCharAt(ind,backwards.charAt(srcInd));
        let ind = ind + 1;
        let srcInd = srcInd - 1;
      }
      return;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
