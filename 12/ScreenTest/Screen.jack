// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {

    static Array SCREEN,twoToThe;

    static bool color;

    /** Initializes the Screen. */
    function void init() {
      let SCREEN = 16384;
      let color = true;
      let twoToThe = Array.new(16);
      let twoToThe[0] = 1;
      let twoToThe[1] = 2;
      let twoToThe[2] = 4;
      let twoToThe[3] =  8;
      let twoToThe[4] = 16;
      let twoToThe[5] = 32;
      let twoToThe[6] = 64;
      let twoToThe[7] = 128;
      let twoToThe[8] = 256;
      let twoToThe[9] = 512;
      let twoToThe[10] = 1024;
      let twoToThe[11] = 2048;
      let twoToThe[12] = 4096;
      let twoToThe[13] = 8192;
      let twoToThe[14] = 16384;
      let twoToThe[15] = 16384+16384;
      return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
      var int offset;
      let offset = 0;
      while(offset < 8192) {
        let SCREEN[offset] = 0;
        let offset = offset + 1;
      }
      return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
      let color = b;
      return;
    }

    function int setBit(int x,bool towhat,int where) {
      if(towhat) {
        return x | twoToThe[where];
      }
      return x & ~twoToThe[where];
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
      var int xover16,val,ytimes32,temp;
      let xover16 = x/16;
      let ytimes32 = y*32;
      let SCREEN[ytimes32 + xover16] = Screen.setBit(SCREEN[ytimes32 + xover16],color,x & 15);
      return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
      var int dx,dy,adyminbdx,a,b,temp;

      if(x1 > x2) {
        let temp = x1;
        let x1 = x2;
        let x2 = temp;
        let temp = y1;
        let y1 = y2;
        let y2 = temp;
      }

      let dx = x2 - x1;
      let dy = y2 - y1;
      let a = 0;
      let b = 0;
      let adyminbdx = 0;

      if(dx = 0) {
        while(b < dy) {
          do Screen.drawPixel(x1,y1+b);
          let b = b+1;
        }
        while(b > dy) {
          do Screen.drawPixel(x1,y1+b);
          let b = b-1;
        }
        return;
      }

      if(dy = 0) {
        while(a < dx) {
          do Screen.drawPixel(x1+a,y1);
          let a = a+1;
        }
        return;
      }

      if(dy > 0) {
        while((a < dx) | (b < dy) ) {
          do Screen.drawPixel(x1 + a,y1 + b);
          if(adyminbdx < 0) {
            let a = a + 1;
            let adyminbdx = adyminbdx + dy;
          }
          else {
            let b = b + 1;
            let adyminbdx = adyminbdx - dx;
          }
        }
      }

      if(dy < 0) {
        while((a < dx) | (b > dy)) {
          do Screen.drawPixel(x1 + a,y1 + b);
          if(adyminbdx < 0) {
            let a = a + 1;
            let adyminbdx = adyminbdx - dy;
          }
          else {
            let b = b - 1;
            let adyminbdx = adyminbdx - dx;
          }
        }
      }
      return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
      var int dy,dx,cx,cy;
      let dy = y2-y1;
      let dx = x2-x1;
      let cx = 0;
      while(cx < dx) {
        let cy = 0;
        while(cy < dy) {
          do Screen.drawPixel(x1+cx,y1+cy);
          let cy = cy + 1;
        }
        let cx = cx + 1;
      }
      return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
      var int dy,junk;
      let dy = -r;
      while(~(dy = r)) {
        let junk = Math.sqrt((r*r)-(dy*dy));
        do Screen.drawLine(x-junk,y+dy,x+junk,y+dy);
        let dy = dy + 1;
      }
      return;
    }
}
